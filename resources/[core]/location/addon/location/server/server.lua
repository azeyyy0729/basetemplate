local rentedVehicles = {}
local rentalCooldowns = {} -- Stocke les d√©lais avant une nouvelle location

function hasActiveRental(playerId)
    local currentTime = os.time()

    if rentalCooldowns[playerId] and currentTime < rentalCooldowns[playerId] then
        return true, "Veuillez patienter avant de louer un nouveau v√©hicule."
    end

    return false
end

lib.callback.register("vecRent:server:rentVehicle", function(source, vehicleData, paymentType)
    local xPlayer = ESX.GetPlayerFromId(source)
    
    local rentalAllowed, message = hasActiveRental(source)
    if rentalAllowed then
        return false, message or "Vous avez d√©j√† un v√©hicule lou√© ou devez attendre avant d'en relouer un."
    end

    local price = vehicleData.price
    local hasEnoughMoney = false

    if paymentType == "liquide" then
        if xPlayer.getMoney() >= price then
            xPlayer.removeMoney(price)
            hasEnoughMoney = true
        else
            return false, "Vous n'avez pas assez d'argent liquide."
        end
    elseif paymentType == "banque" then
        if xPlayer.getAccount('bank').money >= price then
            xPlayer.removeAccountMoney('bank', price)
            hasEnoughMoney = true
        else
            return false, "Vous n'avez pas assez d'argent sur votre compte bancaire."
        end
    end

    if hasEnoughMoney then
        table.insert(rentedVehicles, { playerId = source, vehicleData = vehicleData })

        rentalCooldowns[source] = os.time() + 30 -- Ajoute un d√©lai de 30 secondes avant la prochaine location

        local logMessage = string.format(
            "üöó **Location de v√©hicule**\nNom: %s\nID: %s\nPosition: X: %.2f Y: %.2f Z: %.2f\nV√©hicule lou√©: %s\nM√©thode de paiement: %s",
            xPlayer.getName(),
            xPlayer.identifier,
            vehicleData.spawn.x,
            vehicleData.spawn.y,
            vehicleData.spawn.z,
            vehicleData.vehicle,
            paymentType
        )

        exports['basic']:SendLogs(1752220, "Location de v√©hicules", logMessage, Logs.Location.webhookURL)

        local created = lib.callback.await("vecRent:client:createVehicle", source, vehicleData)
        if created then
          --  exports.mVehicle.AddTemporalVehicle(source, vehicleData.vehicle) -- Enregistre le v√©hicule temporaire
            return true, "V√©hicule lou√© avec succ√®s !"
        else
            return false, "Une erreur est survenue lors de la cr√©ation du v√©hicule."
        end
    else
        return false, "Fonds insuffisants."
    end
end)

